'use client';

import { useEffect, useState } from 'react';
import throttle from 'lodash/throttle';

interface GameObject {
  id: number;
  position: number;
  column: number;
  type: string;
  speed: number;
  split?: boolean;
  cluster?: boolean;
}

const objectTypes = [
  { type: 'rocket', icon: '🚀', speed: 0.5 },
  { type: 'balloon', icon: '🎈', speed: 0.3 },
  { type: 'ufo', icon: '🛸', speed: 0.7 },
  { type: 'alien', icon: '👾', speed: 0.4 },
  { type: 'meteor', icon: '☄️', speed: 0.6 },
  { type: 'spaceship', icon: '🚀', speed: 0.45 },
  { type: 'star', icon: '⭐', speed: 0.35 },
  { type: 'heart', icon: '❤️', speed: 0.25 },
  { type: 'egg', icon: '🥚', speed: 0.5, split: true },
  { type: 'eggCluster', icon: '🪐', speed: 0.5, split: true, cluster: true }
];

export default function Home() {
  const [objects, setObjects] = useState<GameObject[]>([]);
  const [score, setScore] = useState<number>(0);
  const [lives, setLives] = useState<number>(3);
  const [gameOver, setGameOver] = useState<boolean>(false);
  const [wave, setWave] = useState<number>(1);
  const [waveMessage, setWaveMessage] = useState<string | null>(null);
  const [objectsDestroyed, setObjectsDestroyed] = useState<number>(0);
  const [spawnInterval, setSpawnInterval] = useState<number>(1000);
  const [paused, setPaused] = useState<boolean>(false);
  const [pauseMessage, setPauseMessage] = useState<string | null>(null);
  const [gameStarted, setGameStarted] = useState<boolean>(false);
  const [difficulty, setDifficulty] = useState<'easy' | 'medium' | 'hard' | null>(null);

  // Number of columns based on difficulty
  const numColumns = difficulty === 'easy' ? 3 : difficulty === 'medium' ? 4 : difficulty === 'hard' ? 5 : 0;

  // Calculate objects per wave based on the current wave
  const objectsPerWave = 20 + wave - 1; // Increase by 1 object per wave

  useEffect(() => {
    if (gameOver || paused || !gameStarted) return;

    if (objectsDestroyed === objectsPerWave) {
      endWave();
    } else {
      const interval = setInterval(() => {
        if (objects.length < objectsPerWave) {
          addNewObject();
        }
      }, spawnInterval);

      return () => clearInterval(interval);
    }
  }, [objects.length, objectsDestroyed, gameOver, paused, gameStarted, objectsPerWave]);

  useEffect(() => {
    if (paused || !gameStarted) return;

    // Define the throttled function for updating objects
    const throttledUpdate = throttle(() => {
      setObjects((prevObjects) =>
        prevObjects.map((obj) => ({
          ...obj,
          position: obj.position + obj.speed,
        }))
      );
    }, 32); // 32ms throttle period (approx 30fps)

    const risingInterval = setInterval(throttledUpdate, 10);

    return () => {
      clearInterval(risingInterval);
      throttledUpdate.cancel(); // Clean up throttle on component unmount
    };
  }, [paused, gameStarted]);

  useEffect(() => {
    const outOfBounds = objects.filter((obj) => obj.position >= 100);

    if (outOfBounds.length > 0) {
      setLives((prevLives) => {
        const newLives = Math.max(prevLives - outOfBounds.length, 0);
        if (newLives === 0) {
          setGameOver(true);
        }
        return newLives;
      });
      setObjects((prevObjects) =>
        prevObjects.filter((obj) => obj.position < 100)
      );
    }
  }, [objects]);

  const addNewObject = () => {
    let randomType;
    const randomChance = Math.random();
    if (wave >= 20 && randomChance < 0.1) {
      randomType = objectTypes.find((type) => type.type === 'eggCluster');
    } else if (wave >= 10 && randomChance < 0.1) {
      randomType = objectTypes.find((type) => type.type === 'egg');
    } else if (randomChance < 0.05) {
      randomType = objectTypes.find((type) => type.type === 'heart');
    } else {
      randomType = objectTypes[Math.floor(Math.random() * (objectTypes.length - 3))];
    }

    if (randomType) {
      setObjects((prevObjects) => [
        ...prevObjects,
        {
          id: Date.now(),
          position: 0,
          column: Math.floor(Math.random() * numColumns),
          type: randomType.type,
          speed: randomType.speed * (1 + (wave - 1) * 0.05), // Increase speed per wave
          split: randomType.split || false,
          cluster: randomType.cluster || false,
        },
      ]);
    }
  };

  const handleDestroy = (column: number) => {
    if (paused || !gameStarted) return;

    const columnObjects = objects.filter((obj) => obj.column === column);
    if (columnObjects.length > 0) {
      const latestObject = columnObjects[columnObjects.length - 1];

      if (latestObject.type === 'heart') {
        setLives((prevLives) => Math.min(prevLives + 1, 10));
        setObjects((prevObjects) =>
          prevObjects.filter((obj) => obj.id !== latestObject.id)
        );
      } else if (latestObject.split) {
        const newObjects = latestObject.type === 'eggCluster' ? [
          {
            id: Date.now() + 1,
            position: latestObject.position - 10,
            column: column,
            type: 'egg',
            speed: 0.5,
            split: true
          },
          {
            id: Date.now() + 2,
            position: latestObject.position - 20,
            column: (column + 1) % numColumns,
            type: 'egg',
            speed: 0.5,
            split: true
          },
        ] : [
          {
            id: Date.now() + 1,
            position: latestObject.position,
            column: column,
            type: 'rocket',
            speed: 0.5
          },
          {
            id: Date.now() + 2,
            position: latestObject.position,
            column: (column + 1) % numColumns,
            type: 'rocket',
            speed: 0.5
          },
        ];
        setObjects((prevObjects) => [
          ...prevObjects.filter((obj) => obj.id !== latestObject.id),
          ...newObjects,
        ]);

        setScore((prevScore) => prevScore + 1);
        setObjectsDestroyed((prevCount) => prevCount + 1);
      } else {
        setObjects((prevObjects) =>
          prevObjects.filter((obj) => obj.id !== latestObject.id)
        );

        setScore((prevScore) => prevScore + 1);
        setObjectsDestroyed((prevCount) => prevCount + 1);
      }
    }
  };

  const endWave = () => {
    setWaveMessage(`Wave ${wave} finished`);

    // Remove all objects without increasing score or destroyed objects count
    setObjects((prevObjects) => prevObjects.filter((obj) => obj.position >= 100));
    setObjectsDestroyed(prevDestroyed => prevDestroyed + objects.length);

    setTimeout(() => {
      setWaveMessage(null);
      setWave((prevWave) => prevWave + 1);
      setObjectsDestroyed(0);
      setSpawnInterval((prevInterval) =>
        prevInterval > 200 ? prevInterval - 100 : prevInterval
      );
      setLives((prevLives) => prevLives + 1);
      setPauseMessage('Wave ' + (wave + 1) + ' starting');
    }, 2000);
  };

  useEffect(() => {
    if (pauseMessage && !paused) {
      const timeout = setTimeout(() => {
        setPauseMessage(null);
      }, 2000);

      return () => clearTimeout(timeout);
    }
  }, [pauseMessage, paused]);

  const handleRestart = () => {
    setObjects([]);
    setScore(0);
    setLives(3);
    setGameOver(false);
    setWave(1);
    setObjectsDestroyed(0);
    setSpawnInterval(1000);
    setWaveMessage(null);
    setPauseMessage(null);
    setGameStarted(false);
    setDifficulty(null);
  };

  const handlePause = () => {
    if (paused) {
      setPauseMessage('Game Resumed');
    } else {
      setPauseMessage('Game Paused');
    }
    setPaused((prevPaused) => !prevPaused);
  };

  const handleStart = () => {
    if (difficulty) {
      setGameStarted(true);
    }
  };

  const renderDifficultyButtons = () => (
    <div className="flex flex-col items-center">
      <h2 className="text-2xl font-bold mb-4">Select Difficulty</h2>
      <button
        className="px-4 py-2 bg-green-500 text-white font-semibold rounded-lg hover:bg-green-600 mb-2"
        onClick={() => setDifficulty('easy')}
      >
        Easy
      </button>
      <button
        className="px-4 py-2 bg-yellow-500 text-white font-semibold rounded-lg hover:bg-yellow-600 mb-2"
        onClick={() => setDifficulty('medium')}
      >
        Medium
      </button>
      <button
        className="px-4 py-2 bg-red-500 text-white font-semibold rounded-lg hover:bg-red-600"
        onClick={() => setDifficulty('hard')}
      >
        Hard
      </button>
    </div>
  );

  return (
    <div className="flex flex-col items-center justify-center h-screen bg-gray-900 text-white text-center">
      <h1 className="text-3xl font-bold mb-4">To the MOOOON</h1>
      {difficulty === null ? (
        renderDifficultyButtons()
      ) : (
        <>
          {gameOver ? (
            <>
              <h2 className="text-2xl font-bold mb-4">Game Over</h2>
              <button
                className="px-4 py-2 bg-green-500 text-white font-semibold rounded-lg hover:bg-green-600"
                onClick={handleRestart}
              >
                Restart
              </button>
            </>
          ) : (
            <>
              <div className="relative w-96 h-3/5 bg-black border-2 border-white flex flex-row">
                {/* Overlay with game stats */}
                <div className="absolute top-0 left-0 w-full p-1 bg-gray-800 bg-opacity-50 z-20">
                  <div className="flex justify-between">
                    <p className="text-xs mb-2">Score: {score}</p>
                    <p className="text-xs mb-2">Lives: {lives}</p>
                    <p className="text-xs mb-2">Wave: {wave}</p>
                  </div>
                  <div>
                    <p className="text-xs mb-4">Objects Destroyed: {objectsDestroyed}/{objectsPerWave}</p>
                  </div>
                </div>
                {waveMessage && (
                  <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-black bg-opacity-70 text-white p-2 rounded-lg z-10">
                    {waveMessage}
                  </div>
                )}
                {pauseMessage && (
                  <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-black bg-opacity-70 text-white p-2 rounded-lg z-10">
                    {pauseMessage}
                  </div>
                )}
                {[...Array(numColumns)].map((_, col) => (
                  <div key={col} className="flex-1 relative flex flex-col">
                    {objects
                      .filter((obj) => obj.column === col)
                      .map((obj) => (
                        <div
                          key={obj.id}
                          className="absolute text-2xl transition-all duration-100 left-1/2 transform -translate-x-1/2"
                          style={{ bottom: `${obj.position}%` }}
                          onClick={() => handleDestroy(col)}
                        >
                          {objectTypes.find((type) => type.type === obj.type)?.icon}
                        </div>
                      ))}
                  </div>
                ))}
              </div>

              {!gameStarted && !gameOver ? (
                <button
                  className="px-4 py-2 bg-blue-500 text-white font-semibold rounded-lg hover:bg-blue-600 mt-2"
                  onClick={handleStart}
                >
                  Start Game
                </button>
              ) : (
                <>
                  <div className="flex justify-around w-96 mt-4">
                    {[...Array(numColumns)].map((_, col) => (
                      <div key={col} className="flex mx-1">
                        <button
                          className="px-2 py-1 bg-red-500 text-white font-semibold rounded-lg hover:bg-red-600 mt-2"
                          onClick={() => handleDestroy(col)}
                        >
                          Destroy Column {col + 1}
                        </button>
                      </div>
                    ))}
                  </div>

                  <button
                    className="px-2 py-1 bg-red-600 text-white font-semibold rounded-lg hover:bg-red-700 mt-2"
                    onClick={handlePause}
                  >
                    {paused ? 'Resume' : 'Pause'}
                  </button>
                </>
              )}

            </>
          )}
        </>
      )}
    </div>
  );
}
